name: Build and Deploy Spring Boot App to EC2

on:
  push:
    branches:
      - master  # Trigger the workflow on push to the master branch
  workflow_dispatch:  # Allows manual trigger via GitHub UI

jobs:
  build:
    runs-on: [self-hosted]

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Amazon Corretto JDK 17
      - name: Set up Amazon Corretto JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'  # Use Amazon Corretto as the JDK distribution

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Ensure mvnw is executable
      - name: Make mvnw executable
        run: chmod +x ./mvnw

      # Step 5: Build the project with Maven (Use parallel builds and skip tests)
      - name: Build with Maven
        run: |
          ./mvnw clean install -DskipTests -T 1C  # Use all cores for parallel builds

      # Step 6: Build Docker image and tag it with commit SHA
      - name: Build Docker image
        run: |
          docker build -t springboot-app:${{ github.sha }} .

      # Step 7: Save Docker image as tar file
      - name: Save Docker image as tar
        run: |
          docker save springboot-app:${{ github.sha }} -o springboot-app.tar

      # Step 8: Write EC2 SSH key to a temporary directory
      - name: Write EC2 SSH key to file
        run: |
          mkdir -p ${{ runner.temp }}/ssh
          echo "${{ secrets.EC2_KEY }}" > ${{ runner.temp }}/ssh/key.pem
          chmod 600 ${{ runner.temp }}/ssh/key.pem

      # Step 9: Copy Docker image to EC2 (Using rsync instead of scp for speed)
      - name: Copy Docker image to EC2
        run: |
          rsync -avz -e "ssh -i ${{ runner.temp }}/ssh/key.pem -o StrictHostKeyChecking=no" springboot-app.tar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/

      # Step 10: SSH into EC2 and deploy Docker container
      - name: SSH into EC2 and deploy
        run: |
          ssh -i ${{ runner.temp }}/ssh/key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            set -e
            docker load < springboot-app.tar
            docker stop springboot-app || true
            docker rm springboot-app || true
            docker run -d -p 8080:8080 --name springboot-app springboot-app:${{ github.sha }}
            docker ps
          EOF

      # Step 11: Clean up key file
      - name: Clean up
        run: rm -rf ${{ runner.temp }}/ssh
