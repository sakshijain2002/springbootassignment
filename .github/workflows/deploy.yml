name: Deploy to EC2 and RDS

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Java environment
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Build the JAR file
      - name: Build JAR with Maven
        run: mvn clean package -DskipTests

      # Step 4: Set up SSH private key
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        env:
          EC2_KEY: ${{ secrets.EC2_KEY }}

      # Step 5: Add EC2 to known_hosts
      - name: Set up SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # Step 6: Copy JAR and Docker files to EC2
      - name: Copy JAR and Docker files to EC2
        run: |
          ssh ec2-user@${{ secrets.EC2_HOST }} "mkdir -p /home/ec2-user/springboot-assignment"
          scp target/*.jar ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/springboot-assignment/app.jar
          scp Dockerfile docker-compose.yml ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/springboot-assignment/

      # Step 7: SSH into EC2 and restart Docker container
      - name: Deploy on EC2
        run: |
          ssh -o ServerAliveInterval=60 ec2-user@${{ secrets.EC2_HOST }} <<'EOF'
            echo "âœ… Connected to EC2"
            cd /home/ec2-user/springboot-assignment

            echo "ðŸ§¼ Cleaning up old Docker container..."
            docker rm -f springboot-app || true
            docker-compose down || true

            echo "ðŸš€ Starting new container..."
            docker-compose up --build -d

            echo "âœ… Deployment completed!"
          EOF
