name: Deploy Spring Boot App to EC2 with Docker

on:
  push:
    branches:
      - master  # Trigger the workflow on push to the master branch
  workflow_dispatch:  # Allows manual trigger via GitHub UI

jobs:
  deploy:
    runs-on: ubuntu-latest  # The GitHub-hosted runner for the build step

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Java 17 (using Temurin JDK)
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Build the project using Maven (parallel builds for optimization)
      - name: Build with Maven
        run: mvn -B clean package --file pom.xml -T 1C  # Parallel build with all available cores

      # Step 4: Build Docker image and tag it with commit SHA
      - name: Build Docker image
        run: |
          docker build -t springboot-app:${{ github.sha }} .

      # Step 5: SSH into EC2 instance and deploy
      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}  # Your EC2 instance's public IP or hostname
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}  # Your private EC2 SSH key (stored in GitHub secrets)
          script: |
            # Step 1: Pull the latest changes and build the app if necessary
            cd ~
            if [ ! -d "springboot-app" ]; then
              git clone https://github.com/yourusername/yourrepo springboot-app
            fi
            cd springboot-app
            git pull origin master

            # Step 2: Stop the old container if it exists
            sudo docker stop springboot-app || true
            sudo docker rm springboot-app || true

            # Step 3: Remove any old Docker images (to save space)
            sudo docker image rm springboot-app || true

            # Step 4: Build a new Docker image
            sudo docker build -t springboot-app .

            # Step 5: Run the new Docker container
            sudo docker run -d -p 8080:8080 --name springboot-app springboot-app:${{ github.sha }}

            # Step 6: Clean up old Docker containers and images to save space (optional)
            sudo docker system prune -f

            echo "âœ… Deployment to EC2 completed successfully."
