name: Deploy Spring Boot App to EC2 with Docker Compose

on:
  push:
    branches:
      - master  # Trigger the workflow on push to the master branch
  workflow_dispatch:  # Allows manual trigger via GitHub UI

jobs:
  deploy:
    # Runs on a self-hosted runner
    runs-on: [self-hosted]

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Java 17 (using Temurin as the JDK distribution)
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Build the project with Maven (Use parallel execution to optimize build)
      - name: Build with Maven
        run: mvn -B clean package --file pom.xml -T 1C  # Parallel build with all available cores

      # Step 4: SSH to EC2 and Build & Deploy Docker Image
      - name: SSH to EC2 and Build & Deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Step 1: Navigate to the app directory
            cd ~

            # Step 2: Pull the latest changes from the repository
            if [ ! -d "springboot-app" ]; then
              git clone https://github.com/sakshijain2002/springbootassignment springboot-app
            fi
            cd springboot-app
            git pull origin master

            # Step 3: Kill any existing process on port 8080
            sudo fuser -k 8080/tcp || true

            # Step 4: Remove old Docker container and image (if any)
            sudo docker container rm springboot-app || true
            sudo docker image rm load || true

            # Step 5: Build the new Docker image
            sudo docker build -t springboot-app .

            # Step 6: Run the new Docker container with environment variables
            sudo docker run -d \
              -p 8080:8080 \
              --name springboot-app \
              -e SPRING_DATASOURCE_URL="${{ secrets.RDS_URL }}" \
              -e SPRING_DATASOURCE_USERNAME="${{ secrets.RDS_USERNAME }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.RDS_PASSWORD }}" \
              -e APP_SECRET="${{ secrets.APP_SECRET }}" \
              springboot-app && echo "âœ… Successfully deployed"
            
            # Step 7: Clean up old containers and images to free space (Optional)
            sudo docker system prune -f
